{"version":3,"sources":["src/utils/hardwareInstance.ts","src/utils/importSdk/index.ts","shim.js","src/views/HomeScreen.tsx","src/utils/deviceUtils.ts","src/views/MockConnect.tsx","App.tsx","index.js"],"names":["HardwareSDK","importSdk","_args","arguments","_regeneratorRuntime","async","_context","prev","next","length","undefined","awrap","abrupt","sent","default","HardwareWebSdk","stop","Promise","initialized","getHardwareSDKInstance","memoizee","_context2","resolve","reject","useLowLevelApi","settings","HardwareLowLevelSDK","debug","fetchConfig","console","log","Platform","OS","connectSrc","env","preRelease","init","t0","promise","max","process","global","require","bProcess","p","browser","Buffer","localStorage","USB","React","lazy","Bluetooth","HomeScreen","navigation","useNavigation","_jsxs","View","style","styles","container","children","_jsx","Button","title","onPress","push","Suspense","fallback","Text","DeviceErrors","StyleSheet","create","display","backgroundColor","alignItems","justifyContent","padding","deviceUtils","DeviceUtils","_classCallCheck","connectedDeviceType","scanning","tryCount","_createClass","key","value","callback","_this","searchDevices","searchResponse","getSDKInstance","poll","time","response","_args3","_context3","stopScan","success","setTimeout","this","connectId","result","_context4","getFeatures","_context5","getDeviceType","payload","_response$payload$err","_context6","Error","error","connected","_this2","_context8","feature","_args7","_context7","getFeaturesWithError","message","includes","ConnectTimeout","MockConnect","_useState","useState","_useState2","_slicedToArray","devices","setDevices","_useState3","_useState4","startDeviceScan","res","map","d","_d$connectId","device","_device$connectId","ensureConnected","err","connect","Stack","createNativeStackNavigator","registerRootComponent","NavigationContainer","Navigator","initialRouteName","Screen","name","component","MockScreen"],"mappings":"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","file":"static/js/app.cd9ba5f6.chunk.js","sourcesContent":["import memoizee from 'memoizee';\nimport { Platform } from 'react-native';\nimport { ConnectSettings, CoreApi, LowLevelCoreApi } from '@onekeyfe/hd-core';\nimport { importSdk } from './importSdk';\n\n// eslint-disable-next-line import/no-mutable-exports\nlet HardwareSDK: CoreApi;\nlet HardwareLowLevelSDK: LowLevelCoreApi;\nlet initialized = false;\nconst isNodeEnvironments = false;\n\nexport const getHardwareSDKInstance = memoizee(\n  async () =>\n    // eslint-disable-next-line no-async-promise-executor\n    new Promise<{\n      HardwareSDK: CoreApi;\n      HardwareLowLevelSDK: LowLevelCoreApi;\n      useLowLevelApi: boolean;\n    }>(\n      // eslint-disable-next-line no-async-promise-executor\n      async (resolve, reject) => {\n        const useLowLevelApi = false;\n        if (initialized) {\n          resolve({ HardwareSDK, HardwareLowLevelSDK, useLowLevelApi });\n          return;\n        }\n\n        const settings: Partial<ConnectSettings> = {\n          debug: true,\n          fetchConfig: true,\n        };\n\n        HardwareSDK = await importSdk();\n        // HardwareSDK = await importTopLevelSdk();\n        console.log(HardwareSDK);\n\n        if (Platform.OS === 'web') {\n          settings.connectSrc = 'https://jssdk.onekey.so/0.3.29/';\n          // settings.connectSrc = 'https://localhost:8087/';\n          settings.env = 'web';\n          settings.preRelease = false;\n          // HardwareLowLevelSDK = await importLowLevelSDK();\n        }\n\n        try {\n          await HardwareSDK.init(settings);\n          // await HardwareSDK.init(settings, HardwareLowLevelSDK);\n          console.log('HardwareSDK initialized success');\n          initialized = true;\n\n          resolve({ HardwareSDK, HardwareLowLevelSDK, useLowLevelApi });\n        } catch (e) {\n          reject(e);\n        }\n      }\n    ),\n  {\n    promise: true,\n    max: 1,\n  }\n);\n\nexport { HardwareSDK };\n","import type { CoreApi, LowLevelCoreApi } from '@onekeyfe/hd-core';\n\nexport const importSdk = async (isNodeEnv = false) => {\n  if (isNodeEnv) {\n    return (await import('@onekeyfe/hd-common-connect-sdk')).default as unknown as CoreApi;\n  }\n  return (await import('@onekeyfe/hd-web-sdk')).default.HardwareWebSdk as unknown as CoreApi;\n};\n\nexport const importTopLevelSdk = async (isNodeEnv = false) => {\n  if (isNodeEnv) {\n    return (await import('@onekeyfe/hd-common-connect-sdk')).default as unknown as CoreApi;\n  }\n  return (await import('@onekeyfe/hd-web-sdk')).default.HardwareSDKTopLevel as unknown as CoreApi;\n};\n\nexport const importLowLevelSDK = async () =>\n  (await import('@onekeyfe/hd-web-sdk')).default.HardwareSDKLowLevel as unknown as LowLevelCoreApi;\n","/* eslint-disable no-undef */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nif (typeof __dirname === 'undefined') global.__dirname = '/';\nif (typeof __filename === 'undefined') global.__filename = '';\nif (typeof process === 'undefined') {\n  global.process = require('process');\n} else {\n  const bProcess = require('process');\n  for (const p in bProcess) {\n    if (!(p in process)) {\n      process[p] = bProcess[p];\n    }\n  }\n}\n\nprocess.browser = false;\nif (typeof Buffer === 'undefined') global.Buffer = require('buffer').Buffer;\n\n// global.location = global.location || { port: 80 }\nconst isDev = typeof __DEV__ === 'boolean' && __DEV__;\n// process.env['NODE_ENV'] = isDev ? 'development' : 'production'\nif (typeof localStorage !== 'undefined') {\n  localStorage.debug = isDev ? '*' : '';\n}\n\n// If using the crypto shim, uncomment the following line to ensure\n// crypto is loaded first, so it can populate global.crypto\nrequire('crypto');\n","import React, { Suspense } from 'react';\nimport { StyleSheet, Platform, View, Text, Button } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nconst USB = React.lazy(() => import('../env/USB'));\nconst Bluetooth = React.lazy(() => import('../env/Bluetooth'));\n\nexport default function HomeScreen() {\n  const navigation = useNavigation();\n  return (\n    <View style={styles.container}>\n      {/* @ts-expect-error */}\n      <Button title=\"Mock Screen\" onPress={() => navigation.push('Mock')} />\n      <Suspense fallback={<Text>Loading...</Text>}>\n        {Platform.OS === 'web' ? <USB /> : <Bluetooth />}\n      </Suspense>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 32,\n  },\n});\n","import {\n  IDeviceType,\n  SearchDevice,\n  Success,\n  Unsuccessful,\n  getDeviceType,\n  Features,\n} from '@onekeyfe/hd-core';\n\nimport { getHardwareSDKInstance } from './hardwareInstance';\n\n/**\n * will delete packages/kit/src/utils/device\n * so declare it here\n */\n\ntype IPollFn<T> = (time?: number) => T;\n\nconst MAX_SEARCH_TRY_COUNT = 15;\nconst MAX_CONNECT_TRY_COUNT = 5;\nconst POLL_INTERVAL = 1000;\nconst POLL_INTERVAL_RATE = 1.5;\n\nexport enum DeviceErrors {\n  ConnectTimeout = 'ConnectTimeout',\n  NeedOneKeyBridge = 'NeedOneKeyBridge',\n}\n\nclass DeviceUtils {\n  connectedDeviceType: IDeviceType = 'classic';\n\n  scanning = false;\n\n  tryCount = 0;\n\n  async getSDKInstance() {\n    return getHardwareSDKInstance();\n  }\n\n  startDeviceScan(callback: (searchResponse: Unsuccessful | Success<SearchDevice[]>) => void) {\n    const searchDevices = async () => {\n      const HardwareSDK = await this.getSDKInstance();\n      const searchResponse = await HardwareSDK?.searchDevices();\n      callback(searchResponse);\n\n      this.tryCount += 1;\n      return searchResponse;\n    };\n\n    const poll: IPollFn<void> = async (time = POLL_INTERVAL) => {\n      if (!this.scanning) {\n        return;\n      }\n      if (this.tryCount > MAX_SEARCH_TRY_COUNT) {\n        this.stopScan();\n        return;\n      }\n\n      const response = await searchDevices();\n\n      if (!response.success) {\n        return Promise.reject(response);\n      }\n\n      return new Promise((resolve: (p: void) => void) =>\n        // eslint-disable-next-line no-promise-executor-return\n        setTimeout(() => resolve(poll(time * POLL_INTERVAL_RATE)), time)\n      );\n    };\n\n    this.scanning = true;\n    poll();\n  }\n\n  stopScan() {\n    this.scanning = false;\n    this.tryCount = 0;\n  }\n\n  async connect(connectId: string) {\n    const result = await this.getFeatures(connectId);\n    return result !== null;\n  }\n\n  async getFeatures(connectId: string) {\n    const HardwareSDK = await this.getSDKInstance();\n    const response = await HardwareSDK?.getFeatures(connectId);\n\n    if (response.success) {\n      this.connectedDeviceType = getDeviceType(response.payload);\n      return response.payload;\n    }\n    return null;\n  }\n\n  async getFeaturesWithError(connectId: string) {\n    const HardwareSDK = await this.getSDKInstance();\n    const response = await HardwareSDK?.getFeatures(connectId);\n    if (response.success) {\n      this.connectedDeviceType = getDeviceType(response.payload);\n      return response.payload;\n    }\n    throw new Error(response.payload.error ?? response.payload);\n  }\n\n  async ensureConnected(connectId: string) {\n    let tryCount = 0;\n    let connected = false;\n    const poll: IPollFn<Promise<Features>> = async (time = POLL_INTERVAL) => {\n      if (connected) {\n        return Promise.resolve({} as Features);\n      }\n      tryCount += 1;\n      try {\n        const feature = await this.getFeaturesWithError(connectId);\n        if (feature) {\n          connected = true;\n          return await Promise.resolve(feature);\n        }\n      } catch (e) {\n        console.log('feature 报错 ======== =========');\n        // stop when device not bonded\n        if ((e as unknown as Error).message.includes('device is not bonded')) {\n          return Promise.reject(e);\n        }\n        console.log(e);\n      }\n\n      if (tryCount > MAX_CONNECT_TRY_COUNT) {\n        return Promise.reject(DeviceErrors.ConnectTimeout);\n      }\n      return new Promise((resolve: (p: Promise<Features>) => void) =>\n        // eslint-disable-next-line no-promise-executor-return\n        setTimeout(() => resolve(poll(time * POLL_INTERVAL_RATE)), time)\n      );\n    };\n\n    return poll();\n  }\n}\n\nconst deviceUtils = new DeviceUtils();\n\nexport default deviceUtils;\n","import { KnownDevice } from '@onekeyfe/hd-core';\nimport { useState } from 'react';\nimport { View, Button, Text } from 'react-native';\nimport deviceUtils from '../utils/deviceUtils';\n\nexport default function MockConnect() {\n  const [devices, setDevices] = useState<KnownDevice[]>([]);\n  const [device, setDevice] = useState<KnownDevice | null>(null);\n  function getDeviceLists() {\n    deviceUtils.startDeviceScan(res => {\n      if (res.success) {\n        setDevices(res.payload as KnownDevice[]);\n      } else {\n        setDevices([]);\n      }\n    });\n  }\n\n  function connect(device: KnownDevice) {\n    deviceUtils.stopScan();\n    try {\n      deviceUtils.ensureConnected(device.connectId ?? '');\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <View>\n      <Button title=\"scan\" onPress={() => getDeviceLists()} />\n      <Text>设备列表</Text>\n      {devices.map(d => (\n        <Button key={d.connectId} title={d.connectId ?? ''} onPress={() => connect(d)} />\n      ))}\n    </View>\n  );\n}\n","import React, { Suspense } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport HomeScreen from './src/views/HomeScreen';\nimport MockScreen from './src/views/MockConnect';\nimport { getHardwareSDKInstance } from './src/utils/hardwareInstance';\n\ngetHardwareSDKInstance();\n\nconst Stack = createNativeStackNavigator();\nexport default function App() {\n  return (\n    <NavigationContainer>\n      {/* @ts-expect-error */}\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Mock\" component={MockScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import './shim';\nimport { registerRootComponent } from 'expo';\n\n// eslint-disable-next-line import/no-unresolved\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}